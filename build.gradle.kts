import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import java.net.URI
import java.text.SimpleDateFormat
import java.util.*

val modId: String by extra

plugins {
    id("net.minecraftforge.gradle") version "5.1.+"
    kotlin("jvm") version "1.8.0"
}

group = "ru.chimchima"
version = "1.0"

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

base {
    archivesName.set(modId)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the "official" or "parchment" mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings("snapshot", "20210309-1.16.5")

    // accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))

    runs {
        all {
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "info")
            mods.create(modId) {
                source(sourceSets.main.get())
            }
        }

        create("client") {
            workingDirectory(file("run"))
        }

        create("server") {
            workingDirectory(file("run"))
        }

        create("data") {
            workingDirectory(file("run"))

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args("--mod", modId, "-all")
            args("--output", file("src/generated/resources/"))
            args("--existing", file("src/main/resources/"))
        }
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources {
        srcDir("src/generated/resources")
    }
}

repositories {
    mavenCentral()
    maven {
        name = "Kotlin For Forge"
        url = URI("https://thedarkcolour.github.io/KotlinForForge/")
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:1.16.5-36.2.39")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("thedarkcolour:kotlinforforge:1.17.0")
}

tasks {
    jar {
        manifest {
            val now = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
            attributes(
                mapOf(
                    "Specification-Title" to "Chimber mod",
                    "Specification-Vendor" to "chimbersaw",
                    "Specification-Version" to "1",
                    "Implementation-Title" to project.name,
                    "Implementation-Version" to archiveVersion,
                    "Implementation-Vendor" to "chimbersaw",
                    "Implementation-Timestamp" to now
                )
            )
        }

        finalizedBy("reobfJar")
    }

    compileJava {
        options.encoding = "UTF-8";
    }

    compileKotlin {
        compilerOptions.jvmTarget.set(JvmTarget.JVM_1_8)
    }
}
